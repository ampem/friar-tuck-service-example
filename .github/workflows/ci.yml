name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for Git tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: pytest tests/unit/ -v --cov=app --cov-report=term

      - name: Run integration tests
        run: pytest tests/integration/ -v --cov=app --cov-report=term --cov-report=html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 14

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for Git tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get semantic version
        id: get-version
        run: |
          # Extract latest Git tag or use fallback version
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if image exists
        id: check-image
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository }}/friar-tuck-service-example:${{ steps.get-version.outputs.VERSION }}
          if docker manifest inspect $IMAGE_TAG > /dev/null 2>&1; then
            echo "Image exists, skipping push"
            echo "skip_push=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, proceeding with push"
            echo "skip_push=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        if: steps.check-image.outputs.skip_push == 'false'
        run: |
          docker build -t ghcr.io/${{ github.repository }}/friar-tuck-service-example:${{ steps.get-version.outputs.VERSION }} .
          docker push ghcr.io/${{ github.repository }}/friar-tuck-service-example:${{ steps.get-version.outputs.VERSION }}
